#
# MACHINE GENERATED FILE. DO NOT EDIT.
#
# CMake build file for osc
#
# This file has been generated by lut.Builder 1.2.1
#

cmake_minimum_required(VERSION 2.8)
# --------------------------------------------------------------
#  osc
# --------------------------------------------------------------
set(MODULE_NAME osc)

# Where to install Lua files
if(LUA_INSTALL_DIR)
  set(INSTALL_PATH ${LUA_INSTALL_DIR})
else(LUA_INSTALL_DIR)
  set(INSTALL_PATH "${CMAKE_BINARY_DIR}/lib" CACHE STRING "Install directory path")
endif(LUA_INSTALL_DIR)
message("INSTALL Lua    'osc' TO '${INSTALL_PATH}'")

# Where to install binary modules
if(LUA_INSTALL_BINDIR)
  set(INSTALL_BINPATH ${LUA_INSTALL_BINDIR})
else(LUA_INSTALL_BINDIR)
  set(INSTALL_BINPATH "${CMAKE_BINARY_DIR}/lib" CACHE STRING "Install directory path")
endif(LUA_INSTALL_BINDIR)
message("INSTALL binary 'osc' TO '${INSTALL_BINPATH}'")

# --------------------------------------------------------------
#  module
# --------------------------------------------------------------
add_custom_target(${MODULE_NAME} true)


# -------- PLAT
set(LINK_LIBS stdc++)

if(UNIX)
  if(APPLE)
    set(PLAT "macosx")
    set(LINK_FLAGS "-bundle -undefined dynamic_lookup -all_load")
  else(APPLE)
    set(PLAT "linux")
    set(LINK_FLAGS "-shared")
  endif(APPLE)
else(UNIX)
  if(WIN32)
    set(PLAT "win32")
  else(WIN32)
    set(PLAT "unsupported")
  endif(WIN32)
endif(UNIX)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -Wall -fPIC -O2")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -Wall -fPIC -O2")
if (RELEASE)
  add_definitions(-O2 -DNDEBUG)
endif(RELEASE)

# --------------------------------------------------------------
#  osc.core
# --------------------------------------------------------------
set(core "${MODULE_NAME}_core")

include_directories(/usr/local/include include src/bind src/vendor)

file(GLOB CORE_SOURCES src/*.cpp src/bind/*.cpp src/bind/dub/*.cpp src/vendor/osc/*.cpp)

add_library(${core} MODULE ${CORE_SOURCES})
if(LINK_LIBS)
  target_link_libraries(${core} ${LINK_LIBS})
endif(LINK_LIBS)
set_target_properties(${core}
  PROPERTIES OUTPUT_NAME core
  LINK_FLAGS ${LINK_FLAGS}
  PREFIX ""
  SUFFIX ".so"
)  


add_dependencies(${MODULE_NAME} ${core})

# --------------------------------------------------------------
#  install                                     
# --------------------------------------------------------------
install(TARGETS ${core}
  DESTINATION ${INSTALL_BINPATH}/${MODULE_NAME}
)

# --------------------------------------------------------------
#  install                                     
# --------------------------------------------------------------
install(DIRECTORY ${MODULE_NAME}
  DESTINATION ${INSTALL_PATH}
)


